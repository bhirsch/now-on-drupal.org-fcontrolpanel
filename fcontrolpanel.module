<?php
/**
 * @file
 *  
 */
 
//--------------------------------//
// core Drupal hooks              //
//--------------------------------//

/**
 * Implementation of hook_help()
 */
function fcontrolpanel_help($path, $arg) {
  if ($path == 'admin/help#fcontrolpanel') {
    $txt = 'Features Control Panel provides a.... [FINISH HELP TEXT] '; // TODO
    $output = t($txt);
    return $output;
  }
}
 
/**
 * Implementation of hook_menu().
 */
function fcontrolpanel_menu() {
  $items['admin/build/fcontrolpanel/%/export'] = array(
    'title' => 'export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fcontrolpanel_export_fcontrol', 3),
    'access arguments' => array('fcontrolpanel export'),
    'type' => MENU_CALLBACK,
  );
  $site_name = variable_get('site_name', NULL);
  $items['admin/fcontrolpanel'] = array(
    'title' => t('Control Panel: '. $site_name),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fcontrolpanel_page'),
    'access arguments' => array('access features control panel'),
    'file' => 'fcontrolpanel.page.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function fcontrolpanel_perm() {
  return array('access features control panel', 'fcontrolpanel export', 'administer fcontrolpanel');
}

/**
 * Implementation of hook_form_alter().
 */
function fcontrolpanel_form_alter(&$form, &$form_state, $form_id) {
  //if ($form_id == 'ctools_export_ui_list_form') {
  //  dsm($form);  
  //}
  if($form_id == 'user_login') {
    // Access control and $form['#redirect'] = 'admin/fcontrolpanel' doesn't work
    // here because the user's status changes from anonymous to [role]
    // after they successfully log in.
    $form['#submit'][] = 'fcontrolpanel_goto_fcontrolpanel';
  }
}
// */

/**
 * Implementation of hook_theme().
 */
function fcontrolpanel_theme() {
  return array(
    'fcontrolpanel_fcontrol' => array(
      'arguments' => array('element' => NULL),
    ),
    'fcontrolpanel_admin_block' => array(
      'arguments' => array('package' => NULL),
    ),
    'fcontrolpanel_admin_tabs' => array(
      'arguments' => array('count' => NULL),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function fcontrolpanel_block($op = 'list', $delta = 0, $edit = array()) {
  $packages = fcontrolpanel_get_packages();
  theme('fcontrolpanel_admin_tabs', count($packages)); // todo temp, handle additional tabs
  if ($op == 'list') {
    foreach($packages as $n => $package) {
      $blocks[$n]['info'] = $package['package_title'];  
      $blocks[$n]['admin'] = TRUE;
    }  
    return $blocks;
  } else if ($op == 'view') {
    $package = $packages[$delta];
    $block['subject'] = t($package['package_title']);
    $block['content'] = theme('fcontrolpanel_admin_block', $package);
    return $block;
  }
}

/**
 * Implement theme_fcontrolpanel_admin_tabs().
 *
 * Make Admin Toolbar taller when tabs don't fit 
 * horizontal toolbar.
 *
 * 996px fixed width
 * 9 tabs = 1 row, 30px
 * +9 tabs =  2rows, 50px
 *
 * TODO This would be better handled inside admin module.
 *      Write and submit a patch to help admin module
 *      handle additional horizontal tabs.
 */
function theme_fcontrolpanel_admin_tabs($count) {
  if($count > 9) {
    $admin_toolbar = variable_get('admin_toolbar', NULL);
    if($admin_toolbar['layout'] == 'horizontal') {
      $path = drupal_get_path('module', 'fcontrolpanel');
      drupal_add_css("$path/fcontrolpanel.admin.css");
    }
  }  
}

/**
 * Implement theme_fcontrolpanel_admin_block. 
 * 
 * Each package (feature set) gets a corresponding block
 * for the admin module's admin toolbar.
 * 
 * @param $package
 *  array, all the fcontrols for the package.
 * 
 * @return $output
 *  string, HTML for block content.
 *
 * todo: Consider making packages into real menus.
 */
function theme_fcontrolpanel_admin_block($package) {
  $output = '';
  $output.= '<ul class="menu">';

  // Build array of list items, but don't 
  // add to $output before sorting by weight.
  $lis = array();
  foreach($package['fcontrols'] as $fcontrol) {
    // Info for building list items: 
    $txt = t($fcontrol->title);
    $path = $fcontrol->path;
    $query = $fcontrol->query;
    $perm = ($fcontrol->permission) ? $fcontrol->permission : 'access features control panel';
    // Info for sorting list items: 
    $weight = $fcontrol->weight;
    $name = $fcontrol->name;
    $key = $weight .'-'. $name;
    //$desc = t($fcontrol->description);
    if (user_access($perm)) {
        $link = l($txt, $path, array('query' => $query));
        //$description = '<span class="menu-description"><span class="icon"></span>'. $desc .'</span>';
        //$output .= '<li class="leaf">'. $link . $description .'</li>';
        //$output .= '<li class="leaf">'. $link .'</li>';
        $lis[$key] = '<li class="leaf">'. $link .'</li>';
    }
  }
  // Sort by $key.
  ksort($lis);
  // Add <li>'s to output
  foreach($lis as $li) {
    $output .= $li;  
  }

  $output .= '</ul>';
  
  return $output;
}

//----------------------------------------------//
// fcontrolpanel                                //
//----------------------------------------------//

/**
 * @return $packages
 *  array, fcontrols organized by package
 *
 * $packages[$i]['package_name'] = package name
 * $packages[$i]['package_title'] = $package_title; 
 * $packages[$i]['fcontrols'][$fcontrol]
 */
function fcontrolpanel_get_packages() {
  ctools_include('export');
  $fcontrols = ctools_export_load_object('fcontrolpanel_fcontrol');
  // Make a unique list of packages;
  foreach($fcontrols as $fcontrol) {
    $package_title = $fcontrol->package;
    $package = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $package_title));
    $list[$package] = $package_title;
  }
  // Sort package list in alphabetical order by $package_title.
  // This is particularly important for making hook_block $delta 
  // values correspond with aphabetical order for Admin Toolbar.
  asort($list);
  // Number packages.
  $packages = array();
  $i = 0;
  foreach($list as $package => $package_title) {
    $packages[$i]['package_name'] = $package;
    $packages[$i]['package_title'] = $package_title;
    $packages[$i]['disabled'] = TRUE; 
    // Organize fcontrols by package.
    foreach($fcontrols as $fcontrol) {
      if($fcontrol->package == $package_title) {
        $packages[$i]['fcontrols'][] = $fcontrol;
        // At least one control per package needs to be
        // enabled (not disabled) for the package to be
        // enabled (not disabled).
        if (!$fcontrol->disabled) {
          $packages[$i]['disabled'] = FALSE;
        }
      } 
    }
    // default, sort alphabetical (handle sort by weight elsewhere)
    sort($packages[$i]['fcontrols']);
    $i++;
  }
  
  return $packages;
}

/**
 * @param $status
 *  string, 'enable' or 'disable'
 * 
 * This function is responsible for updating the admin module's
 * administrative toolbar to include fcontrolpanel blocks.
 * 
 * Features Control Panel features modules should call this 
 * function on hook_enable() and hook_disable().
 * 
 * If Admin module is enabled, all fcontrolpanel blocks
 * should be automatically added to the toolbar when Features Control Panel
 * features are enabled. 
 *
 * Admin keeps track of blocks in a variable in the variable table
 * called admin_toolbar. Each enabled block is stored like this: 
 * $admin_toolbar['blocks']['fcontrolpanel-delta'] = n;
 * 
 * Remove then re-add all fcontrolpanel blocks. This way, old stuff
 * doesn't hang around if a bunch of features get disabled.
 */
function fcontrolpanel_admin_toolbar($status) {
  if(module_exists('admin') && ($status == 'enable' || $status == 'disable')) {
    $admin_toolbar = variable_get('admin_toolbar', NULL);
    // Check for existing FCP blocks on admin toolbar.
    if(!empty($admin_toolbar['blocks'])) {
      foreach($admin_toolbar['blocks'] as $key => $value) {
        $x = substr($key, 0, 13);
        // Remove fcontrolpanel blocks.
        if ($x == 'fcontrolpanel') {
          unset($admin_toolbar['blocks'][$key]);
        }
      }
    }
    // Re-count fcontrolpanel blocks (deltas).
    // There is one block per package (feature set).
    $packages = fcontrolpanel_get_packages();
    $count = count($packages);
    if($status == 'enable') {
      for($i = 0; $i < $count; $i++) {
        $key = 'fcontrolpanel-'. $i;
        $admin_toolbar['blocks'][$key] = 1;
      }
    } else if ($status == 'disable') {
      // Module being disables is still included in the
      // delta count. Subtract one, otherwise Admin Toolbar
      // keeps an extra, empty, block.
      $count = $count - 1;
      for($i = 0; $i < $count; $i++) {
        $key = 'fcontrolpanel-'. $i;
        $admin_toolbar['blocks'][$key] = 1;
      }
    }
    variable_set('admin_toolbar', $admin_toolbar);
  }
}

/**
 * Redirect users to path: admin/fcontrolpanel.
 *
 * This function is called after successful login.
 */
function fcontrolpanel_goto_fcontrolpanel() {
  if (user_access('access features control panel')) {
    drupal_goto('admin/fcontrolpanel'); 
  }
}

//--------------------------------------------------/
// Ctools plugin                                    /
//--------------------------------------------------/
/**
 * Implmenentation of hook_ctools_plugin_directory.
 */
function fcontrolpanel_ctools_plugin_directory($module, $plugin) {
  if ($plugin == 'export_ui') {
    return 'plugins/'. $plugin;
  }
}

/**
* Implementation of hook_ctools_plugin_api().
*
* Tell CTools that we support the default_mymodule_presets API.
*/
function fcontrolpanel_ctools_plugin_api($owner, $api) {
  if ($owner == 'fcontrolpanel' && $api == 'default_fcontrolpanel_fcontrol') {
    return array('version' => 1);
  }
}

/**
 * Implementation of default hook, hook_default_mymodule_myobj().
 *
 * Provide a couple of default presets.
 *
 * Note: This function name is defined in .install file,
 *   'default hook' => 'default_mymodule_myobj',  // Function hook name.
 */ 
// TODO figure out why this doesn't seem to work.
function fcontrolpanel_default_fcontrolpanel_fcontrol() {
  $export = array();

  $export = array();
  $fcontrol = new stdClass;
  $fcontrol->disabled = FALSE; /* Edit this to true to make a default fcontrol disabled initially */
  $fcontrol->api_version = 1;
  $fcontrol->package = 'example';
  $fcontrol->title = 'This is an example';
  $fcontrol->name = 'example';
  $fcontrol->path = 'admin/example';
  $fcontrol->query = 'x=y&a=b';
  $fcontrol->description = 'This is an example control for the features control panel.';
  $fcontrol->video_title = 'Instructional Video';
  $fcontrol->video = '<embed>YouTube video here.</embed>';
  $fcontrol->instructions_title = '3 Steps to Blah De Blah';
  $fcontrol->instructions = 'Step 1. blee. Step 2. Blah. Step 3. Blo.';

  $export['example'] = $fcontrol;
  return $export;
}


//--------------------------------------------------/
// Ctools export hooks                              /
//--------------------------------------------------/

/**
 * Export a myobj and display it in a form.
 * 
 * @param $name
 *  string, unique id for object
 */
function fcontrolpanel_export_fcontrol(&$form_state, $name) {
  ctools_include('export');
  $obj = fcontrolpanel_fcontrol_load($name);
  drupal_set_title(check_plain($obj->description));
  $code = fcontrolpanel_fcontrol_export($obj);
  $lines = substr_count($code, "\n");

  $form['export'] = array(
    '#title' => t('Export data'),
    '#type' => 'textarea',
    '#value' => $code,
    '#rows' => $lines,
    '#description' => t('Copy the export text and paste it into another myobj using the import function.'),
  );
  return $form;
}

/**
 * Load a single myobj.
 */
function fcontrolpanel_fcontrol_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('fcontrolpanel_fcontrol', 'names', array($name)); 
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Export a myobj.
 */
function fcontrolpanel_fcontrol_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('fcontrolpanel_fcontrol', $obj, $indent);
  return $output;
}

/**
 * Save a single myobj.
 */
// TODO 
function fcontrolpanel_fcontrol_save(&$myobj) {
    $update = (isset($myobj->oid) && is_numeric($myobj->oid)) ? array('oid') : array();
      return drupal_write_record('myobj', $myobj, $update);
}



//-------------------------------------------------/
// Features hooks                                  /
//-------------------------------------------------/
/**
 * Implementation of hook_features_api().
 */
// TODO 

/**
 * Implementation of hook_features_export().
 */
// TODO 

/**
 * Implementation of hook_features_export_render().
 */
// TODO 

/**
 * Implementation of hook_features_export_options().
 */
// TODO 

/**
 * Implementation of hook_features_revert().
 */
// TODO 

